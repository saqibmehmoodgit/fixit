package com.fixit.dao;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.skyway.spring.util.dao.AbstractJpaDao;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.fixit.domain.vo.Blog;
import com.fixit.utility.FixitException;

@Repository("BlogDao")
@Transactional
public class BlogDaoImpl extends AbstractJpaDao<Blog> implements BlogDao {

	@PersistenceContext(unitName = "fixit_db")
	private EntityManager entityManager;

	private final static Set<Class<?>> dataTypes = new HashSet<Class<?>>(
			Arrays.asList(new Class<?>[] { Blog.class }));

	public BlogDaoImpl() {
		// TODO Auto-generated constructor stub
		super();
	}

	@Override
	public EntityManager getEntityManager() {
		// TODO Auto-generated method stub
		return entityManager;
	}

	@Override
	public Set<Class<?>> getTypes() {
		// TODO Auto-generated method stub
		return dataTypes;
	}

	@Override
	public boolean canBeMerged(Blog o) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	@Transactional
	public List<Blog> findBlogDataByStatus(String Status, int min, int max) {
		Query query = createNamedQuery("findBlogDataByStatus", min, max, Status);
		List<Blog> list = query.getResultList();
		return list;
	}

	@Override
	public int updateStatusByBlogId(String blogStatus, int blogId) {
		Query query = createNamedQuery("updateStatusByBlogId",-1,-1,
				blogStatus, blogId);

		return  query.executeUpdate();
	}

	@Override
	public List<Blog> findAllBlog(int min, int max) {
		Query query = createNamedQuery("findAllBlog", min, max);
		List<Blog> list = query.getResultList();
		return list;
	}

	@Override
	public List<Blog> findAllBlogByUserId(int userId, int min, int max) {
		Query query = createNamedQuery("findAllBlogByUserId", min, max, userId);
		List<Blog> list = query.getResultList();
		return list;
	}

	@Override
	public Blog findAllBlogByBlogId(int blogId) {
		Query query = createNamedQuery("findAllBlogByBlogId", -1, -1,blogId);
		return (Blog) query.getSingleResult();
	}

	@Override
	public List<Blog> findBlogByStatusAndUserId(String status, int userId,int min,int max) {
		// TODO Auto-generated method stub
		Query query  = createNamedQuery("findBlogByStatusAndUserId", min, max, userId, status);
		List<Blog> blogsList = query.getResultList();
		return blogsList;
	}

	@Override
	public int updateStatusWithReasonByBlogId(String blogStatus, String reason,
			int blogId) throws FixitException {
		Query query = createNamedQuery("updateStatusWithReasonByBlogId",-1,-1,
				blogStatus,reason,blogId);

		return  query.executeUpdate();
	}

	@Override
	public int deleteBlogByBlogId(int blogId) throws FixitException {
		
		Query query = createNamedQuery("deleteBlogByBlogId", -1, -1, blogId);
		int result = query.executeUpdate();
		return result;
	}

	

}
